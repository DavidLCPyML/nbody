#version 450

const float G = 6.67408E-11;
const uint PARTICLES_PER_GROUP = 256;

layout(local_size_x = PARTICLES_PER_GROUP) in;

struct Particle {
    vec3 pos;
    float _p1;
    vec3 vel;
    float _pad;
    double mass;
    double calibrate;
};

layout(set = 0, binding = 0) uniform GlobalsBuffer {
    mat4 matrix;
    uint particles;
    float delta;
    vec2 _pad;
};

layout(std430, set = 0, binding = 1) buffer DataOld {
    Particle old[];
};

layout(std430, set = 0, binding = 2) buffer DataCurrent {
    Particle data[];
};

double length2(dvec3 v) {
    return v.x * v.x + v.y * v.y + v.z * v.z;
}

void main() {
    uint i = gl_GlobalInvocationID.x;
    if(old[i].mass < 0) { 
        return;
    }

    // Gravity
    if(delta > 0.0) {
        dvec3 temp = dvec3(0.0, 0.0, 0.0);
        for(int j = 0; j < particles; j++) {
            if(j == i) { 
                continue;
            }
            if(old[j].mass == 0) { break; }

            dvec3 diff = old[j].pos - old[i].pos;
            temp += normalize(diff) * old[j].mass / (length2(diff) + old[j].calibrate);
        }
        data[i].vel += vec3(temp * G * delta);
        data[i].pos += data[i].vel * delta;
    }
}
